/* Copyright 2014 Adam BieÅ„kowski (donadigo)
*
* This file is part of Power Installer.
*
* Power Installer is free software: you can redistribute it
* and/or modify it under the terms of version 3 of the
* GNU General Public License as published by the Free Software Foundation.
*
* Power Installer is distributed in the hope that it will be
* useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General
* Public License for more details.
*
* You should have received a copy of the GNU General Public License along
* with Power Installer. If not, see http://www.gnu.org/licenses/.
*/

using PowerInstaller.Utils;

namespace PowerInstaller.Widgets {

    public class ActionsTab : Gtk.EventBox {
    
        public ActionsTab() {
            // Main box
            var box = new Gtk.Box(Gtk.Orientation.VERTICAL, 0);

            handler.body_error = "Something went wrong. Check out: /tmp/pi-log.txt for more information.";

            // All buttons
            var update = new Gtk.Button.with_label(_("Update repositories"));
            update.clicked.connect(() => {
                window.header_set_working(true);
                handler.body_success = "Repositories have been succesfully updated!";
                handler.execute_shell(controller.update_repositories);
                window.header_set_working(false);
            });

            var configure = new Gtk.Button.with_label(_("Configure all packages"));        
            configure.clicked.connect(() => {
                window.header_set_working(true);
                handler.body_success = "All packages have been succesfully configured!";
                handler.execute_shell(controller.configure_packages);  
                window.header_set_working(false);              
            });

            var repair = new Gtk.Button.with_label(_("Repair all packages"));             
            repair.clicked.connect(() => {
                window.header_set_working(true);
                handler.body_success = "All packages have been successfully repaired!";
                handler.execute_shell(controller.repair_packages);   
                window.header_set_working(false);               
            });

            var remove = new Gtk.Button.with_label(_("Remove unnecessary packages"));           
            remove.clicked.connect(() => {
                window.header_set_working(true);
                handler.body_success = "Succesffully removed all unnecessary packages!";
                handler.execute_shell(controller.remove_packages);    
                window.header_set_working(false);               
            });

            var ati_drivers = new Gtk.Button.with_label(_("Install AMD graphic drivers"));
            ati_drivers.clicked.connect(() => {
                window.header_set_working(true); 
                controller.add_repositories({ "ppa:xorg-edgers/ppa" });
                controller.install_packages({ "fglrx", "fglrx-amdcccle" });
                create_backup_file("fglrx fglrx-amdcccle");
                window.header_set_working(false); 
            });

            var nvidia_drivers = new Gtk.Button.with_label(_("Install NVIDIA graphic drivers"));
            nvidia_drivers.clicked.connect(() => {
                window.header_set_working(true);
                controller.add_repositories({ "ppa:xorg-edgers/ppa" });
                controller.install_packages({ "nvidia-graphics-drivers-346", "nvidia-settings" });
                create_backup_file("nvidia-graphics-drivers-346 nvidia-settings");
                window.header_set_working(false); 
            });

            // Add everything to the main box
            Gtk.Button[] buttons = { update, configure, repair, remove, ati_drivers, nvidia_drivers };
            foreach(var button in buttons)
                box.pack_start(button, false, false, 13);
            
            this.add(box);
        }
        
        private void create_backup_file(string uninst_packages) {    
            try {
                var backup_file = File.new_for_path(HOME_DIR + "/revert_drivers.sh");
                if(backup_file.query_exists()) {
                    show_notification("Could not create backup file! The file already exists!", true);
                    return;
                }
                    
                var stream = backup_file.create(FileCreateFlags.NONE);
                var data_stream = new DataOutputStream(stream);
                data_stream.put_string("#!/bin/bash
# AUTOGENERATED BY POWER INSTALLER
sudo add-apt-repository --remove ppa:xorg-edgers/ppa
sudo apt-get update
sudo apt-get remove --purge " + uninst_packages + "\nexit \"$?\"");
                show_notification("If the installtion fails, please run 'bash revert_drivers.sh' to revert the changes.");
            } catch(Error e) { 
                stdout.printf(e.message);
            }       
        }
    }
}
